package domino

trait Attributes {

  import Attribute._

  val accept = AttributeFactory(Accept)
  val acceptCharset = AttributeFactory(AcceptCharset)
  val accesskey = AttributeFactory(AccessKey)
  val action = AttributeFactory(Action)
  val align = AttributeFactory(Align)
  val alt = AttributeFactory(Alternative)
  val async = AttributeFactory(Async)
  val autoComplete = AttributeFactory(AutoComplete)
  val autoFocus = AttributeFactory(AutoFocus)
  val autoplay = AttributeFactory(AutoPlay)
  val buffered = AttributeFactory(Buffered)
  val checked = AttributeFactory(Checked)
  val cite = AttributeFactory(Cite)
  val className = AttributeFactory(ClassName)
  val cls = className
  val cols = AttributeFactory(Cols)
  val colspan = AttributeFactory(ColSpan)
  val content = AttributeFactory(Content)
  val contenteditable = AttributeFactory(ContentEditable)
  val controls = AttributeFactory(Controls)
  val crossorigin = AttributeFactory(CrossOrigin)
  val data = AttributeFactory(Data)
  val datetime = AttributeFactory(DateTime)
  val default = AttributeFactory(Default)
  val defer = AttributeFactory(Defer)
  val dir = AttributeFactory(Dir)
  val dirname = AttributeFactory(DirName)
  val disabled = AttributeFactory(Disabled)
  val download = AttributeFactory(Download)
  val draggable = AttributeFactory(Draggable)
  val dropzone = AttributeFactory(DropZone)
  val enctype = AttributeFactory(EncodingType)
  val `for` = AttributeFactory(For)
  val form = AttributeFactory(Form)
  val formaction = AttributeFactory(FormAction)
  val headers = AttributeFactory(Headers)
  val height = AttributeFactory(Height)
  val hidden = AttributeFactory(Hidden)
  val high = AttributeFactory(High)
  val href = AttributeFactory(Href)
  val hreflang = AttributeFactory(HrefLanguage)
  val httpEquiv = AttributeFactory(HTTPEquiv)
  val id: AttributeFactory[String, Id] = AttributeFactory(Id)
  val integrity = AttributeFactory(Integrity)
  val ismap = AttributeFactory(IsMap)
  val itemprop = AttributeFactory(ItemProp)
  val kind = AttributeFactory(Kind)
  val label = AttributeFactory(Label)
  val lang = AttributeFactory(Attribute.Language)
  val language = AttributeFactory(ScriptingLanguage)
  val list = AttributeFactory(List)
  val loop = AttributeFactory(Loop)
  val low = AttributeFactory(Low)
  val manifest = AttributeFactory(Manifest)
  val max = AttributeFactory(Max)
  val maxlength = AttributeFactory(MaxLength)
  val minlength = AttributeFactory(MinLength)
  val media = AttributeFactory(Media)
  val method = AttributeFactory(Method)
  val min = AttributeFactory(Min)
  val multiple = AttributeFactory(Multiple)
  val muted = AttributeFactory(Muted)
  val name = AttributeFactory(Name)
  val novalidate = AttributeFactory(NoValidate)
  val open = AttributeFactory(Open)
  val optimum = AttributeFactory(Optimum)
  val pattern = AttributeFactory(Pattern)
  val ping = AttributeFactory(Ping)
  val placeholder = AttributeFactory(Placeholder)
  val poster = AttributeFactory(Poster)
  val preload = AttributeFactory(Preload)
  val radiogroup = AttributeFactory(RadioGroup)
  val readonly = AttributeFactory(ReadOnly)
  val rel = AttributeFactory(Rel)
  val required = AttributeFactory(Required)
  val reversed = AttributeFactory(Reversed)
  val rows = AttributeFactory(Rows)
  val rowspan = AttributeFactory(RowSpan)
  val sandbox = AttributeFactory(Sandbox)
  val scope = AttributeFactory(Scope)
  val scoped = AttributeFactory(Scoped)
  val seamless = AttributeFactory(Seamless)
  val selected = AttributeFactory(Selected)
  val shape = AttributeFactory(Shape)
  val size = AttributeFactory(Size)
  val sizes = AttributeFactory(Sizes)
  val slot = AttributeFactory(Slot)
  val span = AttributeFactory(Span)
  val spellcheck = AttributeFactory(SpellCheck)
  val src = AttributeFactory(Source)
  val srcdoc = AttributeFactory(SourceDocument)
  val srclang = AttributeFactory(SourceLanguage)
  val srcset = AttributeFactory(SourceSet)
  val start = AttributeFactory(Start)
  val step = AttributeFactory(Step)
  val style = AttributeFactory(Style)
  val summary = AttributeFactory(Summary)
  val tabindex = AttributeFactory(TabIndex)
  val target = AttributeFactory(Target)
  val title = AttributeFactory(Title)
  val `type` = AttributeFactory(Type)
  val usemap = AttributeFactory(UseMap)
  val value = AttributeFactory(Value)
  val width = AttributeFactory(Width)
  val wrap = AttributeFactory(Wrap)

  def data(name: String) = AttributeFactory((t: String) => CustomData(name, t))
}
